<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <link type="text/css" rel="stylesheet" href="style.css"/>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="fabric.min.js" charset="utf-8"></script>
    <!--<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/1.11.8/TweenLite.min.js"></script>-->
    <script src="./../build/d3fabric.js" charset="utf-8"></script>
    <script src="flare.js" charset="utf-8"></script>
    <style type="text/css">
.chart {
  display: block;
  margin: auto;
  margin-top: 40px;
}
    </style>
  </head>
  <body>
    <div id="body">
      <div id="footer">
        d3.layout.treemap (Canvas)
        <div class="hint">click or option-click to descend or ascend</div>
        <div><select>
          <option value="size">Size</option>
          <option value="count">Count</option>
        </select></div>
      </div>
    </div>
    <script type="text/javascript">

var w = 1280 - 80,
    h = 800 - 180,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    color = d3.scale.category20c(),
    root,
    node;

// GSAP usage
//d3Fabric(d3, fabric, TweenLite);

// No-GSAP usage
d3Fabric(d3, fabric);

var treemap = d3.layout.treemap()
              .round(false)
              .size([w, h])
              .sticky(true)
              .value(function(d) { return d.size; });

var canvasArea = d3.select("#body").append("div")
                .attr("class", "chart")
                .style("width", w + "px")
                .style("height", h + "px")
                .append("fabric:canvas")
                .property("renderOnAddRemove", false)
                .property("selection", false)
                .attr("width", w)
                .attr("height", h);

node = root = getFlareJson();

var nodes = treemap.nodes(root)
            .filter(function (d) { return !d.children; });

var cell = canvasArea.selectAll("group")
          .data(nodes)
          .enter().append("group")
          .classed("cell", true)
          .attr("originX", "center")
          .attr("originY", "center")
          .attr("left", function (d) { return d.x; })
          .attr("top", function (d) { return d.y; })
          .on("mousedown", function(d) { return zoom(node == d.parent ? root : d.parent); });

cell.append("rect")
    .attr("width", function (d) { return Math.max(d.dx - 1, 0); })
    .attr("height", function (d) { return Math.max(d.dy - 1, 0); })
    .attr("fill", function(d) { return color(d.parent.name); });

cell.append("text")
    .attr("originX", "center")
    .attr("originY", "center")
    .attr("left", function (d) { return d.dx / 2; })
    .attr("top", function (d) { return d.dy / 2; })
    .attr("fontSize", 11)
    .text(function (d) { return d.name; })
    .attr("opacity", function (d) { d.w = this.getWidth(); return d.dx > d.w ? 1 : 0; });

d3.select(window).on("click", function() { zoom(root); });

d3.select("select").on("change", function() {
  treemap.value(this.value == "size" ? size : count).nodes(root);
  zoom(node);
});

canvasArea.startRender();

function size(d) {
  return d.size;
}

function count(d) {
  return 1;
}

function zoom(d) {
  if (canvasArea === undefined) {
      return;
  }
  var kx = w / d.dx, ky = h / d.dy, t;
  x.domain([d.x, d.x + d.dx]);
  y.domain([d.y, d.y + d.dy]);

  t = canvasArea.selectAll("group.cell").transition()
      .duration(d3.event ? (d3.event.altKey ? 7500 : 1000) : 1000)
      .attr("left", function (d) { return x(d.x); })
      .attr("top", function (d) { return y(d.y); });

  t.select("rect")
      .attr("width", function (d) { return kx * d.dx - 1; })
      .attr("height", function (d) { return ky * d.dy - 1; });

  t.select("text")
      .attr("left", function (d) { return kx * d.dx / 2; })
      .attr("top", function (d) { return ky * d.dy / 2; })
      .attr("opacity", function (d) { return kx * d.dx > d.w ? 1 : 0; });

  nodeZoom = d;

  if (d3.event) {
      d3.event.stopPropagation();
  }
}
    </script>
  </body>
</html>
