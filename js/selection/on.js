/**
 * on function for d3 selection class
 */
d3Babric_init(function (d3fInternal) {
    'use strict';

    var d3 = d3fInternal.d3;

    // Helper functions

    // Produces a fake d3.event event so that it can be treated like a normal event even if it was generated by Fabric
    function d3_fabric_selection_on_wrap_event(opt) {
        /*jslint todo: true */
        if (!opt.e) {
            opt.e = {
                isFakeD3Event: true //always "true" so that it can be determined that everything here is not a browser event, but instead built from the known options provided
            };
            /* TODO: create fake event
             * variables
             * - bubbles:bool
             * - cancelable:bool
             * - currentTarget:<obj>
             * - defaultPrevented:bool
             * - eventPhase:int
             * - target:<obj>
             * - timeStamp:Date
             * - type:<obj>
             * functions
             * - preventDefault():void
             * - stopImmediatePropagation():void
             * - stopPropagation():void
             */
        }
        /*jslint todo: false */
        return opt.e;
    }

    // Produces the required handler for actually executing within a Fabric event handler
    function d3_fabric_selection_on_wrap(listener, argumentz) {
        return function (opt) {
            var o = d3.event;
            d3.event = d3_fabric_selection_on_wrap_event(opt);
            argumentz[0] = this.__data__;
            try {
                listener.apply(this, argumentz);
            } finally {
                d3.event = o;
            }
        };
    }

    // Returns the process function to set or remove an event listener
    function d3_fabric_selection_on(type, listener) {
        var wrap = d3_fabric_selection_on_wrap;
        function onAdd() {
            var li = wrap(listener, arguments);
            listener._ = li;
            if (this._fabricCanvas !== undefined) {
                this._fabricCanvas.canvas.on(type, li);
            } else {
                this.on(type, li);
            }
        }
        function onRemove() {
            var li = listener._;
            if (this._fabricCanvas !== undefined) {
                this._fabricCanvas.canvas.off(type, li);
            } else {
                this.off(type, li);
            }
        }
        return listener ? onAdd : onRemove;
    }

    if (!d3fInternal.d3_fabric_selection_proto.on) {
        d3fInternal.d3_fabric_selection_proto.on = function (type, listener, capture) {
            var n = arguments.length;
            if (n < 3) {
                if (typeof type !== "string") {
                    if (n < 2) { listener = false; }
                    Object.keys(type).forEach(function (capture) {
                        this.each(d3_fabric_selection_on(capture, type[capture], listener));
                    }, this);
                    return this;
                }
                if (n < 2) { return this; }
                capture = false;
            }
            return this.each(d3_fabric_selection_on(type, listener, capture));
        };
    }
});